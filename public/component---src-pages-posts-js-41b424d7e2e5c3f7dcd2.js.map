{"version":3,"sources":["webpack:///./src/components/post.js","webpack:///./src/pages/posts.js","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["Post","props","useQuery","gql","slug","loading","error","data","className","postWithId","title","image","src","createdAt","content","Posts","path","OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","forceUpdate","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","networkStatus","ready","called","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","setTimeout","resetQueryStoreErrors","bind","treeRenderingInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","observableQueryFields","currentResult","partial","errors","length","graphQLErrors","partialRefetch","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","updatedOptions","queryDataRef","current","queryData","memoFn","key","ref","memo","value","queryResult","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","lookupQueryInfo","queryInstance","finish","seen","set","Promise","resolve","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"component---src-pages-posts-js-41b424d7e2e5c3f7dcd2.js","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from \"graphql-tag\";\n\nconst Post = props => {\n  // graphql query\n  const { loading, error, data } = useQuery(gql`\n    {\n      postWithId(slug: \"${props.slug}\") {\n        image\n        slug\n        is_published\n        createdAt\n        updatedAt\n        content\n        title\n        category\n      }\n    }\n  `);\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (error) {\n    return <h2>Error fetch post</h2>;\n  }\n\n  return (\n    <section className=\"container\">\n      <h1>{data.postWithId.title}</h1>\n      {data.postWithId.image && <img src={data.postWithId.image} />}\n      <span>Created at: {data.postWithId.createdAt}</span>\n      <p>{data.postWithId.content}</p>\n    </section>\n  );\n};\n\nexport default Post;\n","import React from \"react\";\nimport { Router } from \"@reach/router\";\nimport Post from \"../components/post\";\n\nimport SEO from \"../components/seo\";\nimport Layout from \"../components/layout\";\n\nconst Posts = props => {\n  return (\n    <Layout>\n      <SEO title=\"Collections\" />\n      <Router>\n        <Post path=\"/posts/:slug\" />\n      </Router>\n    </Layout>\n  );\n};\n\nexport default Posts;\n","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        forceUpdate = _a.forceUpdate;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.forceUpdate();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.forceUpdate = forceUpdate;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _this = this;\n\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n      setTimeout(function () {\n        _this.currentObservable.query && _this.currentObservable.query.resetQueryStoreErrors();\n      });\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var treeRenderingInitiated = this.context && this.context.renderPromises;\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined\n    };\n\n    if (ssrDisabled && (treeRenderingInitiated || fetchDisabled)) {\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (treeRenderingInitiated) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.context && this.context.renderPromises && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.context && this.context.renderPromises) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.forceUpdate();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.forceUpdate();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery) return;\n\n    var _a = obsQuery.getCurrentResult(),\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n\n  if (!queryDataRef.current) {\n    queryDataRef.current = new QueryData({\n      options: updatedOptions,\n      context: context,\n      forceUpdate: forceUpdate\n    });\n  }\n\n  var queryData = queryDataRef.current;\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  useEffect(function () {\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}